//Programmed by Jinzhong Zhang (zhangjin@cern.ch)
///////CheckList:
//(1)Configuration.h(2)btagNtupReader.h(3)Plotting_NoMCweight.C(4)setTDRStyle.h
//(5)data PU distribution root file (optional)
///////Usage:
//(1) (optional) preparing the file of the PU distribution in data (the one generated by ./estimatePileupD.py)
//See https://twiki.cern.ch/twiki/bin/viewauth/CMS/PileupReweighting for how to do this 
//(2) set parameters in this file, general users may only change the (B)(E) and the variable pudistribution_data_filename in (B)
//(3) root -l
//(4) root[0]> .L Plotting_NoMCweight.C++
//(5) root[1]> Load("SSVHE")
//////Keywords List:
//(1)efficiencies under different discriminators: SSVHE SSVHP TCHE TCHP JetP JetBP CSVPF CSVMVA, e.g.Load("SSVHE")
//(2)average jet P_T in each pt bin: Load("MeanPt b u d ") " b u d "is the interested flavors. Spaces are needed on both left and right sides of the flavor name.
//(3)Reco Jet Pt vs Gen/PartonP_T plots: Load("MCPt b u d uds ")
//(4)ratio of PU tracks in jets in different PUs: Load("NPUTracks b u d uds ")
//#define DEBUG//turn on all information
//----------------------(A)General Cut and Parameters-----------------------
//#define CALJETMEANZ//if do not use the mean Track Longitudinal IP per jet, comment it out to speed up
//#define PARTON //partonkinematics (before hardonization)
//#define GENJET //Generated Jets (after hardonization)
//#define CLEANMCTRUTHFLAVORBYPUTRACK
//#define CLEANMCTRUTHFLAVORBYDecayLengthAndJetAsixPUTRACK
#define JetCut(iJet) WhichPt[iJet]>20.&&fabs(WhichEta[iJet])<2.4&&jetNeutralEmEnergyFraction[iJet]<0.99&&jetNeutralEmEnergyFraction[iJet]<0.99&&jetnConstituents[iJet]>1&&jetChargedHadronEnergyFraction[iJet]>0.0&&jetChargedMultiplicity[iJet]>0.0&&jetChargedEmEnergyFraction[iJet]<0.99
#define EventCut numberOfPUVertices<MAXPU// comment it out to drop the Event cut
//----------------------(B)Pileup Variables--------------------------------
#define MAXPU 24
//------------the PU bins-------------------------------------
//the largest PU should be MAXPU but not MAXPU-1
const Byte_t PU_Bin_LowEdge[]={0,12};
const Byte_t PU_Bin_HighEdge[]={0,16};
const Byte_t PU_nBins=sizeof(PU_Bin_LowEdge)/sizeof(Byte_t);
//MC PU distribution
//------------the PU reweight-------------------------------------
//Predefined Spring11_PU_S1
const Double_t Spring11_PU_S1[MAXPU+1]={0.0698146584, 0.0698146584, 0.0698146584,0.0698146584,0.0698146584,0.0698146584,0.0698146584,0.0698146584,0.0698146584,0.0698146584,0.0698146584,0.0630151648,0.0526654164,0.0402754482,0.0292988928,0.0194384503,0.0122016783,0.007207042,0.004003637,0.0020278322,0.0010739954,0.0004595759,0.0002229748,0.0001028162,4.58337152809607E-05};
//Link to a predefined PU scenario
#define npu_probs Spring11_PU_S1//comment it out to let the program calculate the pudistribution from ntuples
//the file name of the PU distribution in data
//See https://twiki.cern.ch/twiki/bin/viewauth/CMS/PileupReweighting for details
//#define pudistribution_data_filename "pudistRun160404_167913.root"//comment it out to reweight PU to flat distribution from 0 up to MAXPU
//----------------------(C)Options particularly for pt/eta plots---------------
//#define FITOPTION "pol4"//set only "polN", non-predefined function in root will lead to crash; comment it out to use direct linear fit between two nearest points
#define Required_BEffAccuracy 0.00001//the maximum tolerable discrepancy between the B eff and the required fixed B eff. It should be very small to reduce the bias. It can be zero but will be worse than small values.
#define Required_UDSGEffAccuracy 0.00005//the maximum tolerable discrepancy between the log10(UDSG eff) and the required fixed log10(UDSG eff). It should be very small to reduce the bias. It can be zero but will be worse than small values.
//-----------------------(D)Plotting Preference---------------------
#ifdef DEBUG
  #define SHOWDISCRIMINATORVALUESONPLOT //show discriminator values on non b eff vs b eff plots
#endif
#define RESULT_FILENAME "result"//the file name of the result, it will be named as result_filename+"_"+option+".root"
#define PLOTTITLE "CMS Simulation"
const EColor ColorList[]={kBlack,kRed,kGreen,kMagenta,kBlue,kCyan,kGray,EColor(kOrange+7)}; const unsigned char numColor=sizeof(ColorList)/sizeof(EColor);
#define NDISCRIMINATORBINS 5000
#define NEFFPOINTS 50//appoximate number of points on non B eff vs B eff plots
#define MAKEJetVarPlot
//#define SHOWSECONDERRORBAR
const Float_t EtaBins[]={0,0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4}; const UInt_t nEtaBins=sizeof(EtaBins)/sizeof(Float_t)-1;
const Float_t PtBins[]={20,40,60,80,100,130,160,190,220,300,400,500}; const UInt_t nPtBins=sizeof(PtBins)/sizeof(Float_t)-1;
#define SavePDFFormat
//-----------------------(E)SampleFiles------------------------------
#define bTagNtupleVersion 15 //it stands for version of the commissioning ntuples, see http://cmssw.cvs.cern.ch/cgi-bin/cmssw.cgi/UserCode/bTag/CommissioningCommonSetup/test/NtupReader_dir/README_btagNtupReader
Float_t CrossSections[]={784300.,115100.,24260.,1168.};
const UInt_t nSamples=sizeof(CrossSections)/sizeof(Float_t);
#define SamplesnEvents {3203869,3045200,2780880,3168480};//If you do not define this, the code will use the nEntiries in the ntuple instead. It may give bias since there are cuts while building the ntuple
#ifdef SamplesnEvents
const Float_t Samples_nEvents[nSamples]=SamplesnEvents;
#endif
Float_t SamplesWeights[nSamples];
//sample files: The file names are separated by comma. Each sample is defined as a cstring.
char QCD80to120[]="/home/zhangjin/MetaData/bTaggingNtuple_09Sep_QCD_Pt_80to120/standardPFNtuple_100_1_nxO.root";
char QCD120to170[]="/home/zhangjin/MetaData/bTaggingNtuple_09Sep_QCD_Pt_120to170/standardPFNtuple_100_1_YxD.root";
char QCD170to300[]="/home/zhangjin/MetaData/bTaggingNtuple_09Sep_QCD_Pt_170to300/standardPFNtuple_104_1_NHc.root";
char QCD300to470[]="/home/zhangjin/MetaData/bTaggingNtuple_09Sep_QCD_Pt_300to470/standardPFNtuple_10_1_4lW.root";
char *MC_files[]={QCD80to120,QCD120to170,QCD170to300,QCD300to470};
#ifdef PARTON
  #define WhichPt PartonPt
  #define WhichEta PartonEta
#else
  #ifdef GENJET
    #define WhichPt GenJetPt
    #define WhichEta GenJetEta
  #else
    #define WhichPt jetPt
    #define WhichEta jetEta
  #endif
#endif
